{"ast":null,"code":"// Mock implementation - replace with real API calls\nexport const getCurrentUser = async () => {\n  const user = JSON.parse(localStorage.getItem('mnemo_user'));\n  if (!user) throw new Error('Not authenticated');\n  return user;\n};\nexport const login = async (email, password) => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  // Mock validation\n  if (!email || !password) {\n    throw new Error('Email and password are required');\n  }\n  const user = {\n    id: `user-${Date.now()}`,\n    email,\n    name: email.split('@')[0],\n    createdAt: new Date().toISOString()\n  };\n  localStorage.setItem('mnemo_user', JSON.stringify(user));\n  return user;\n};\nexport const register = async (email, password, name) => {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  if (!name || !email || !password) {\n    throw new Error('All fields are required');\n  }\n  const existingUsers = JSON.parse(localStorage.getItem('mnemo_users') || '[]');\n  if (existingUsers.some(u => u.email === email)) {\n    throw new Error('Email already registered');\n  }\n  const user = {\n    id: `user-${Date.now()}`,\n    email,\n    name,\n    createdAt: new Date().toISOString()\n  };\n  localStorage.setItem('mnemo_users', JSON.stringify([...existingUsers, user]));\n  localStorage.setItem('mnemo_user', JSON.stringify(user));\n  return user;\n};\nexport const logout = async () => {\n  localStorage.removeItem('mnemo_user');\n};","map":{"version":3,"names":["getCurrentUser","user","JSON","parse","localStorage","getItem","Error","login","email","password","Promise","resolve","setTimeout","id","Date","now","name","split","createdAt","toISOString","setItem","stringify","register","existingUsers","some","u","logout","removeItem"],"sources":["C:/Users/5019508/Documents/dev/Mnemo/src/contexts/AuthContext.js"],"sourcesContent":["// Mock implementation - replace with real API calls\r\nexport const getCurrentUser = async () => {\r\n  const user = JSON.parse(localStorage.getItem('mnemo_user'));\r\n  if (!user) throw new Error('Not authenticated');\r\n  return user;\r\n};\r\n\r\nexport const login = async (email, password) => {\r\n  // Simulate API delay\r\n  await new Promise(resolve => setTimeout(resolve, 500));\r\n  \r\n  // Mock validation\r\n  if (!email || !password) {\r\n    throw new Error('Email and password are required');\r\n  }\r\n\r\n  const user = {\r\n    id: `user-${Date.now()}`,\r\n    email,\r\n    name: email.split('@')[0],\r\n    createdAt: new Date().toISOString()\r\n  };\r\n\r\n  localStorage.setItem('mnemo_user', JSON.stringify(user));\r\n  return user;\r\n};\r\n\r\nexport const register = async (email, password, name) => {\r\n  await new Promise(resolve => setTimeout(resolve, 500));\r\n\r\n  if (!name || !email || !password) {\r\n    throw new Error('All fields are required');\r\n  }\r\n\r\n  const existingUsers = JSON.parse(localStorage.getItem('mnemo_users') || '[]');\r\n  if (existingUsers.some(u => u.email === email)) {\r\n    throw new Error('Email already registered');\r\n  }\r\n\r\n  const user = {\r\n    id: `user-${Date.now()}`,\r\n    email,\r\n    name,\r\n    createdAt: new Date().toISOString()\r\n  };\r\n\r\n  localStorage.setItem('mnemo_users', JSON.stringify([...existingUsers, user]));\r\n  localStorage.setItem('mnemo_user', JSON.stringify(user));\r\n  return user;\r\n};\r\n\r\nexport const logout = async () => {\r\n  localStorage.removeItem('mnemo_user');\r\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;EAC3D,IAAI,CAACJ,IAAI,EAAE,MAAM,IAAIK,KAAK,CAAC,mBAAmB,CAAC;EAC/C,OAAOL,IAAI;AACb,CAAC;AAED,OAAO,MAAMM,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C;EACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;EAEtD;EACA,IAAI,CAACH,KAAK,IAAI,CAACC,QAAQ,EAAE;IACvB,MAAM,IAAIH,KAAK,CAAC,iCAAiC,CAAC;EACpD;EAEA,MAAML,IAAI,GAAG;IACXY,EAAE,EAAE,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IACxBP,KAAK;IACLQ,IAAI,EAAER,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzBC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC,CAACK,WAAW,CAAC;EACpC,CAAC;EAEDf,YAAY,CAACgB,OAAO,CAAC,YAAY,EAAElB,IAAI,CAACmB,SAAS,CAACpB,IAAI,CAAC,CAAC;EACxD,OAAOA,IAAI;AACb,CAAC;AAED,OAAO,MAAMqB,QAAQ,GAAG,MAAAA,CAAOd,KAAK,EAAEC,QAAQ,EAAEO,IAAI,KAAK;EACvD,MAAM,IAAIN,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;EAEtD,IAAI,CAACK,IAAI,IAAI,CAACR,KAAK,IAAI,CAACC,QAAQ,EAAE;IAChC,MAAM,IAAIH,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEA,MAAMiB,aAAa,GAAGrB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC;EAC7E,IAAIkB,aAAa,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACjB,KAAK,KAAKA,KAAK,CAAC,EAAE;IAC9C,MAAM,IAAIF,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EAEA,MAAML,IAAI,GAAG;IACXY,EAAE,EAAE,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IACxBP,KAAK;IACLQ,IAAI;IACJE,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC,CAACK,WAAW,CAAC;EACpC,CAAC;EAEDf,YAAY,CAACgB,OAAO,CAAC,aAAa,EAAElB,IAAI,CAACmB,SAAS,CAAC,CAAC,GAAGE,aAAa,EAAEtB,IAAI,CAAC,CAAC,CAAC;EAC7EG,YAAY,CAACgB,OAAO,CAAC,YAAY,EAAElB,IAAI,CAACmB,SAAS,CAACpB,IAAI,CAAC,CAAC;EACxD,OAAOA,IAAI;AACb,CAAC;AAED,OAAO,MAAMyB,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChCtB,YAAY,CAACuB,UAAU,CAAC,YAAY,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}