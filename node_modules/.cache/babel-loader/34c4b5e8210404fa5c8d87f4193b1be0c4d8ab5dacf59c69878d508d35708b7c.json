{"ast":null,"code":"import { saveToStorage, getFromStorage } from '../utils/storage';\nconst FLASHCARDS_KEY = 'user_flashcards';\nconst DECKS_KEY = 'user_decks';\n\n// Funções para decks\nexport const getRecentDecks = userId => {\n  const decks = getFromStorage(DECKS_KEY) || {};\n  return Object.values(decks).filter(deck => deck.userId === userId).sort((a, b) => new Date(b.lastAccessed) - new Date(a.lastAccessed)).slice(0, 3);\n};\nexport const getRecommendedDecks = userId => {\n  return [{\n    id: 'genetics-101',\n    name: 'Genética Básica',\n    cardCount: 25,\n    progress: 40,\n    icon: 'fa-dna'\n  }, {\n    id: 'neuroscience-101',\n    name: 'Neurociência',\n    cardCount: 18,\n    progress: 15,\n    icon: 'fa-brain'\n  }];\n};\n\n// Funções para flashcards\nexport const getDeckFlashcards = deckId => {\n  const flashcards = getFromStorage(FLASHCARDS_KEY) || {};\n  return Object.values(flashcards).filter(card => card.deckId === deckId);\n};\nexport const updateFlashcardDifficulty = (cardId, difficulty) => {\n  const flashcards = getFromStorage(FLASHCARDS_KEY) || {};\n  if (flashcards[cardId]) {\n    flashcards[cardId].difficulty = difficulty;\n    flashcards[cardId].lastReviewed = new Date().toISOString();\n    saveToStorage(FLASHCARDS_KEY, flashcards);\n  }\n};\nexport const createFlashcard = (deckId, front, back) => {\n  const flashcards = getFromStorage(FLASHCARDS_KEY) || {};\n  const newCard = {\n    id: `card-${Date.now()}`,\n    deckId,\n    front,\n    back,\n    difficulty: 3,\n    lastReviewed: null,\n    nextReview: new Date().toISOString(),\n    createdAt: new Date().toISOString()\n  };\n  flashcards[newCard.id] = newCard;\n  saveToStorage(FLASHCARDS_KEY, flashcards);\n  return newCard;\n};","map":{"version":3,"names":["saveToStorage","getFromStorage","FLASHCARDS_KEY","DECKS_KEY","getRecentDecks","userId","decks","Object","values","filter","deck","sort","a","b","Date","lastAccessed","slice","getRecommendedDecks","id","name","cardCount","progress","icon","getDeckFlashcards","deckId","flashcards","card","updateFlashcardDifficulty","cardId","difficulty","lastReviewed","toISOString","createFlashcard","front","back","newCard","now","nextReview","createdAt"],"sources":["C:/Users/5019508/Documents/dev/Mnemo/src/services/flashcards.js"],"sourcesContent":["import { saveToStorage, getFromStorage } from '../utils/storage';\r\n\r\nconst FLASHCARDS_KEY = 'user_flashcards';\r\nconst DECKS_KEY = 'user_decks';\r\n\r\n// Funções para decks\r\nexport const getRecentDecks = (userId) => {\r\n  const decks = getFromStorage(DECKS_KEY) || {};\r\n  return Object.values(decks)\r\n    .filter(deck => deck.userId === userId)\r\n    .sort((a, b) => new Date(b.lastAccessed) - new Date(a.lastAccessed))\r\n    .slice(0, 3);\r\n};\r\n\r\nexport const getRecommendedDecks = (userId) => {\r\n  return [\r\n    {\r\n      id: 'genetics-101',\r\n      name: 'Genética Básica',\r\n      cardCount: 25,\r\n      progress: 40,\r\n      icon: 'fa-dna'\r\n    },\r\n    {\r\n      id: 'neuroscience-101',\r\n      name: 'Neurociência',\r\n      cardCount: 18,\r\n      progress: 15,\r\n      icon: 'fa-brain'\r\n    }\r\n  ];\r\n};\r\n\r\n// Funções para flashcards\r\nexport const getDeckFlashcards = (deckId) => {\r\n  const flashcards = getFromStorage(FLASHCARDS_KEY) || {};\r\n  return Object.values(flashcards).filter(card => card.deckId === deckId);\r\n};\r\n\r\nexport const updateFlashcardDifficulty = (cardId, difficulty) => {\r\n  const flashcards = getFromStorage(FLASHCARDS_KEY) || {};\r\n  if (flashcards[cardId]) {\r\n    flashcards[cardId].difficulty = difficulty;\r\n    flashcards[cardId].lastReviewed = new Date().toISOString();\r\n    saveToStorage(FLASHCARDS_KEY, flashcards);\r\n  }\r\n};\r\n\r\nexport const createFlashcard = (deckId, front, back) => {\r\n  const flashcards = getFromStorage(FLASHCARDS_KEY) || {};\r\n  const newCard = {\r\n    id: `card-${Date.now()}`,\r\n    deckId,\r\n    front,\r\n    back,\r\n    difficulty: 3,\r\n    lastReviewed: null,\r\n    nextReview: new Date().toISOString(),\r\n    createdAt: new Date().toISOString()\r\n  };\r\n  flashcards[newCard.id] = newCard;\r\n  saveToStorage(FLASHCARDS_KEY, flashcards);\r\n  return newCard;\r\n};\r\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,cAAc,QAAQ,kBAAkB;AAEhE,MAAMC,cAAc,GAAG,iBAAiB;AACxC,MAAMC,SAAS,GAAG,YAAY;;AAE9B;AACA,OAAO,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACxC,MAAMC,KAAK,GAAGL,cAAc,CAACE,SAAS,CAAC,IAAI,CAAC,CAAC;EAC7C,OAAOI,MAAM,CAACC,MAAM,CAACF,KAAK,CAAC,CACxBG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACL,MAAM,KAAKA,MAAM,CAAC,CACtCM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,YAAY,CAAC,GAAG,IAAID,IAAI,CAACF,CAAC,CAACG,YAAY,CAAC,CAAC,CACnEC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AAChB,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAIZ,MAAM,IAAK;EAC7C,OAAO,CACL;IACEa,EAAE,EAAE,cAAc;IAClBC,IAAI,EAAE,iBAAiB;IACvBC,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE;EACR,CAAC,EACD;IACEJ,EAAE,EAAE,kBAAkB;IACtBC,IAAI,EAAE,cAAc;IACpBC,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE;EACR,CAAC,CACF;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAIC,MAAM,IAAK;EAC3C,MAAMC,UAAU,GAAGxB,cAAc,CAACC,cAAc,CAAC,IAAI,CAAC,CAAC;EACvD,OAAOK,MAAM,CAACC,MAAM,CAACiB,UAAU,CAAC,CAAChB,MAAM,CAACiB,IAAI,IAAIA,IAAI,CAACF,MAAM,KAAKA,MAAM,CAAC;AACzE,CAAC;AAED,OAAO,MAAMG,yBAAyB,GAAGA,CAACC,MAAM,EAAEC,UAAU,KAAK;EAC/D,MAAMJ,UAAU,GAAGxB,cAAc,CAACC,cAAc,CAAC,IAAI,CAAC,CAAC;EACvD,IAAIuB,UAAU,CAACG,MAAM,CAAC,EAAE;IACtBH,UAAU,CAACG,MAAM,CAAC,CAACC,UAAU,GAAGA,UAAU;IAC1CJ,UAAU,CAACG,MAAM,CAAC,CAACE,YAAY,GAAG,IAAIhB,IAAI,CAAC,CAAC,CAACiB,WAAW,CAAC,CAAC;IAC1D/B,aAAa,CAACE,cAAc,EAAEuB,UAAU,CAAC;EAC3C;AACF,CAAC;AAED,OAAO,MAAMO,eAAe,GAAGA,CAACR,MAAM,EAAES,KAAK,EAAEC,IAAI,KAAK;EACtD,MAAMT,UAAU,GAAGxB,cAAc,CAACC,cAAc,CAAC,IAAI,CAAC,CAAC;EACvD,MAAMiC,OAAO,GAAG;IACdjB,EAAE,EAAE,QAAQJ,IAAI,CAACsB,GAAG,CAAC,CAAC,EAAE;IACxBZ,MAAM;IACNS,KAAK;IACLC,IAAI;IACJL,UAAU,EAAE,CAAC;IACbC,YAAY,EAAE,IAAI;IAClBO,UAAU,EAAE,IAAIvB,IAAI,CAAC,CAAC,CAACiB,WAAW,CAAC,CAAC;IACpCO,SAAS,EAAE,IAAIxB,IAAI,CAAC,CAAC,CAACiB,WAAW,CAAC;EACpC,CAAC;EACDN,UAAU,CAACU,OAAO,CAACjB,EAAE,CAAC,GAAGiB,OAAO;EAChCnC,aAAa,CAACE,cAAc,EAAEuB,UAAU,CAAC;EACzC,OAAOU,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}