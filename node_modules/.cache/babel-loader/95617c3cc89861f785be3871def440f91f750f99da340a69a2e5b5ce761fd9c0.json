{"ast":null,"code":"import { saveToStorage, getFromStorage, removeFromStorage } from '../utils/storage';\nconst AUTH_KEY = 'auth_user';\nexport const login = async (email, password) => {\n  // Simulação de autenticação\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const users = getFromStorage('app_users') || [];\n      const user = users.find(u => u.email === email && u.password === password);\n      if (user) {\n        const authUser = {\n          id: user.id,\n          email: user.email,\n          name: user.name || email.split('@')[0],\n          course: user.course || null\n        };\n        saveToStorage(AUTH_KEY, authUser);\n        resolve(authUser);\n      } else {\n        reject(new Error('Email ou senha incorretos'));\n      }\n    }, 1000);\n  });\n};\nexport const signup = async ({\n  email,\n  password\n}) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const users = getFromStorage('app_users') || [];\n      if (users.some(u => u.email === email)) {\n        reject(new Error('Email já cadastrado'));\n      } else {\n        const newUser = {\n          id: `user-${Date.now()}`,\n          email,\n          password,\n          // Na prática, armazene hash da senha\n          createdAt: new Date().toISOString()\n        };\n        users.push(newUser);\n        saveToStorage('app_users', users);\n        const authUser = {\n          id: newUser.id,\n          email: newUser.email,\n          name: newUser.email.split('@')[0]\n        };\n        saveToStorage(AUTH_KEY, authUser);\n        resolve(authUser);\n      }\n    }, 1500);\n  });\n};\nexport const logout = () => {\n  removeFromStorage(AUTH_KEY);\n};\nexport const getCurrentUser = () => {\n  return getFromStorage(AUTH_KEY);\n};\nexport const updateUserProfile = async (userId, updates) => {\n  const user = getFromStorage(AUTH_KEY);\n  if (user && user.id === userId) {\n    const updatedUser = {\n      ...user,\n      ...updates\n    };\n    saveToStorage(AUTH_KEY, updatedUser);\n    return updatedUser;\n  }\n  return null;\n};","map":{"version":3,"names":["saveToStorage","getFromStorage","removeFromStorage","AUTH_KEY","login","email","password","Promise","resolve","reject","setTimeout","users","user","find","u","authUser","id","name","split","course","Error","signup","some","newUser","Date","now","createdAt","toISOString","push","logout","getCurrentUser","updateUserProfile","userId","updates","updatedUser"],"sources":["C:/Users/5019508/Documents/dev/Mnemo/src/services/auth.js"],"sourcesContent":["import { saveToStorage, getFromStorage, removeFromStorage } from '../utils/storage';\r\n\r\nconst AUTH_KEY = 'auth_user';\r\n\r\nexport const login = async (email, password) => {\r\n  // Simulação de autenticação\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const users = getFromStorage('app_users') || [];\r\n      const user = users.find(u => u.email === email && u.password === password);\r\n      \r\n      if (user) {\r\n        const authUser = {\r\n          id: user.id,\r\n          email: user.email,\r\n          name: user.name || email.split('@')[0],\r\n          course: user.course || null\r\n        };\r\n        saveToStorage(AUTH_KEY, authUser);\r\n        resolve(authUser);\r\n      } else {\r\n        reject(new Error('Email ou senha incorretos'));\r\n      }\r\n    }, 1000);\r\n  });\r\n};\r\n\r\nexport const signup = async ({ email, password }) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const users = getFromStorage('app_users') || [];\r\n      \r\n      if (users.some(u => u.email === email)) {\r\n        reject(new Error('Email já cadastrado'));\r\n      } else {\r\n        const newUser = {\r\n          id: `user-${Date.now()}`,\r\n          email,\r\n          password, // Na prática, armazene hash da senha\r\n          createdAt: new Date().toISOString()\r\n        };\r\n        \r\n        users.push(newUser);\r\n        saveToStorage('app_users', users);\r\n        \r\n        const authUser = {\r\n          id: newUser.id,\r\n          email: newUser.email,\r\n          name: newUser.email.split('@')[0]\r\n        };\r\n        \r\n        saveToStorage(AUTH_KEY, authUser);\r\n        resolve(authUser);\r\n      }\r\n    }, 1500);\r\n  });\r\n};\r\n\r\nexport const logout = () => {\r\n  removeFromStorage(AUTH_KEY);\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n  return getFromStorage(AUTH_KEY);\r\n};\r\n\r\nexport const updateUserProfile = async (userId, updates) => {\r\n  const user = getFromStorage(AUTH_KEY);\r\n  if (user && user.id === userId) {\r\n    const updatedUser = { ...user, ...updates };\r\n    saveToStorage(AUTH_KEY, updatedUser);\r\n    return updatedUser;\r\n  }\r\n  return null;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}