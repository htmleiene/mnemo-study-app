{"ast":null,"code":"export const getCurrentUser = async () => {\n  const user = JSON.parse(localStorage.getItem('mnemo_user'));\n  if (!user) throw new Error('Not authenticated');\n  return user;\n};\nexport const login = async (email, password) => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  // Mock validation\n  if (!email || !password) {\n    throw new Error('Email and password are required');\n  }\n  const user = JSON.parse(localStorage.getItem('mnemo_user'));\n  if (!user || user.email !== email) {\n    throw new Error('User not found');\n  }\n\n  // In a real app, you would verify the password hash\n  return user;\n};\nexport const register = async (email, password, name, studyData = {}) => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  // Mock validation\n  if (!name || !email || !password) {\n    throw new Error('All fields are required');\n  }\n\n  // Check if user already exists\n  const existingUser = JSON.parse(localStorage.getItem('mnemo_user'));\n  if (existingUser && existingUser.email === email) {\n    throw new Error('Email already registered');\n  }\n\n  // Create new user\n  const user = {\n    id: `user-${Date.now()}`,\n    email,\n    name,\n    studyData,\n    // Now properly defined as a parameter\n    createdAt: new Date().toISOString()\n  };\n\n  // Save to localStorage (simulating database)\n  localStorage.setItem('mnemo_user', JSON.stringify(user));\n  return user;\n};\nexport const logout = async () => {\n  localStorage.removeItem('mnemo_user');\n};","map":{"version":3,"names":["getCurrentUser","user","JSON","parse","localStorage","getItem","Error","login","email","password","Promise","resolve","setTimeout","register","name","studyData","existingUser","id","Date","now","createdAt","toISOString","setItem","stringify","logout","removeItem"],"sources":["C:/Users/5019508/Documents/dev/Mnemo/src/services/auth.js"],"sourcesContent":["export const getCurrentUser = async () => {\r\n  const user = JSON.parse(localStorage.getItem('mnemo_user'));\r\n  if (!user) throw new Error('Not authenticated');\r\n  return user;\r\n};\r\n\r\nexport const login = async (email, password) => {\r\n  // Simulate API delay\r\n  await new Promise(resolve => setTimeout(resolve, 500));\r\n  \r\n  // Mock validation\r\n  if (!email || !password) {\r\n    throw new Error('Email and password are required');\r\n  }\r\n\r\n  const user = JSON.parse(localStorage.getItem('mnemo_user'));\r\n  if (!user || user.email !== email) {\r\n    throw new Error('User not found');\r\n  }\r\n\r\n  // In a real app, you would verify the password hash\r\n  return user;\r\n};\r\n\r\nexport const register = async (email, password, name, studyData = {}) => {\r\n  // Simulate API delay\r\n  await new Promise(resolve => setTimeout(resolve, 500));\r\n\r\n  // Mock validation\r\n  if (!name || !email || !password) {\r\n    throw new Error('All fields are required');\r\n  }\r\n\r\n  // Check if user already exists\r\n  const existingUser = JSON.parse(localStorage.getItem('mnemo_user'));\r\n  if (existingUser && existingUser.email === email) {\r\n    throw new Error('Email already registered');\r\n  }\r\n\r\n  // Create new user\r\n  const user = {\r\n    id: `user-${Date.now()}`,\r\n    email,\r\n    name,\r\n    studyData, // Now properly defined as a parameter\r\n    createdAt: new Date().toISOString()\r\n  };\r\n\r\n  // Save to localStorage (simulating database)\r\n  localStorage.setItem('mnemo_user', JSON.stringify(user));\r\n  return user;\r\n};\r\n\r\nexport const logout = async () => {\r\n  localStorage.removeItem('mnemo_user');\r\n};"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;EAC3D,IAAI,CAACJ,IAAI,EAAE,MAAM,IAAIK,KAAK,CAAC,mBAAmB,CAAC;EAC/C,OAAOL,IAAI;AACb,CAAC;AAED,OAAO,MAAMM,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C;EACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;EAEtD;EACA,IAAI,CAACH,KAAK,IAAI,CAACC,QAAQ,EAAE;IACvB,MAAM,IAAIH,KAAK,CAAC,iCAAiC,CAAC;EACpD;EAEA,MAAML,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;EAC3D,IAAI,CAACJ,IAAI,IAAIA,IAAI,CAACO,KAAK,KAAKA,KAAK,EAAE;IACjC,MAAM,IAAIF,KAAK,CAAC,gBAAgB,CAAC;EACnC;;EAEA;EACA,OAAOL,IAAI;AACb,CAAC;AAED,OAAO,MAAMY,QAAQ,GAAG,MAAAA,CAAOL,KAAK,EAAEC,QAAQ,EAAEK,IAAI,EAAEC,SAAS,GAAG,CAAC,CAAC,KAAK;EACvE;EACA,MAAM,IAAIL,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;EAEtD;EACA,IAAI,CAACG,IAAI,IAAI,CAACN,KAAK,IAAI,CAACC,QAAQ,EAAE;IAChC,MAAM,IAAIH,KAAK,CAAC,yBAAyB,CAAC;EAC5C;;EAEA;EACA,MAAMU,YAAY,GAAGd,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;EACnE,IAAIW,YAAY,IAAIA,YAAY,CAACR,KAAK,KAAKA,KAAK,EAAE;IAChD,MAAM,IAAIF,KAAK,CAAC,0BAA0B,CAAC;EAC7C;;EAEA;EACA,MAAML,IAAI,GAAG;IACXgB,EAAE,EAAE,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IACxBX,KAAK;IACLM,IAAI;IACJC,SAAS;IAAE;IACXK,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;EACpC,CAAC;;EAED;EACAjB,YAAY,CAACkB,OAAO,CAAC,YAAY,EAAEpB,IAAI,CAACqB,SAAS,CAACtB,IAAI,CAAC,CAAC;EACxD,OAAOA,IAAI;AACb,CAAC;AAED,OAAO,MAAMuB,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChCpB,YAAY,CAACqB,UAAU,CAAC,YAAY,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}