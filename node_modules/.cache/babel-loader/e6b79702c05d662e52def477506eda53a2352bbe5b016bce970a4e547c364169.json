{"ast":null,"code":"export const getSpacedRepetitionSchedule = (reviewsCount, difficulty) => {\n  // Algoritmo SM-2 modificado\n  const intervals = [1,\n  // Primeira revisão: 1 dia\n  3,\n  // Segunda revisão: 3 dias\n  7,\n  // Terceira revisão: 1 semana\n  16,\n  // Quarta revisão: ~2 semanas\n  35 // Quinta revisão: ~1 mês\n  ];\n  const difficultyWeights = [0.5, 0.7, 1, 1.3, 1.5];\n  const weight = difficultyWeights[difficulty - 1] || 1;\n  const interval = reviewsCount < intervals.length ? intervals[reviewsCount] : intervals[intervals.length - 1] * Math.pow(2, reviewsCount - intervals.length);\n  const nextDate = new Date();\n  nextDate.setDate(nextDate.getDate() + Math.round(interval * weight));\n  return nextDate;\n};\nexport const generateStudyPlan = user => {\n  const {\n    course,\n    performance\n  } = user;\n  const today = new Date();\n\n  // Simulação - na prática isso viria de uma API de IA\n  return {\n    priorityDecks: course.curriculum.filter(subject => {\n      var _performance$mastered;\n      return !(performance !== null && performance !== void 0 && (_performance$mastered = performance.masteredDecks) !== null && _performance$mastered !== void 0 && _performance$mastered.includes(subject.deckId));\n    }).sort((a, b) => a.semester - b.semester).slice(0, 3).map(subject => subject.deckId),\n    suggestedSchedule: {\n      [today.toISOString().split('T')[0]]: [{\n        deckId: 'biology-101',\n        duration: 30\n      }, {\n        deckId: 'math-101',\n        duration: 45\n      }]\n    },\n    estimatedMastery: {\n      weeklyGoal: 15,\n      projectedMasteryDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() + 30)\n    }\n  };\n};\nexport const fetchAIExplanation = async concept => {\n  // Simulação - na prática chamaria uma API como OpenAI\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        explanation: `A IA explica que \"${concept}\" é um conceito fundamental que...`,\n        relatedConcepts: ['Concept A', 'Concept B'],\n        mnemonics: ['Mnemônico 1', 'Mnemônico 2']\n      });\n    }, 1000);\n  });\n};","map":{"version":3,"names":["getSpacedRepetitionSchedule","reviewsCount","difficulty","intervals","difficultyWeights","weight","interval","length","Math","pow","nextDate","Date","setDate","getDate","round","generateStudyPlan","user","course","performance","today","priorityDecks","curriculum","filter","subject","_performance$mastered","masteredDecks","includes","deckId","sort","a","b","semester","slice","map","suggestedSchedule","toISOString","split","duration","estimatedMastery","weeklyGoal","projectedMasteryDate","getFullYear","getMonth","fetchAIExplanation","concept","Promise","resolve","setTimeout","explanation","relatedConcepts","mnemonics"],"sources":["C:/Users/5019508/Documents/dev/Mnemo/src/services/ai.js"],"sourcesContent":["export const getSpacedRepetitionSchedule = (reviewsCount, difficulty) => {\r\n    // Algoritmo SM-2 modificado\r\n    const intervals = [\r\n      1,    // Primeira revisão: 1 dia\r\n      3,    // Segunda revisão: 3 dias\r\n      7,    // Terceira revisão: 1 semana\r\n      16,   // Quarta revisão: ~2 semanas\r\n      35    // Quinta revisão: ~1 mês\r\n    ];\r\n    \r\n    const difficultyWeights = [0.5, 0.7, 1, 1.3, 1.5];\r\n    const weight = difficultyWeights[difficulty - 1] || 1;\r\n    \r\n    const interval = reviewsCount < intervals.length \r\n      ? intervals[reviewsCount] \r\n      : intervals[intervals.length - 1] * Math.pow(2, reviewsCount - intervals.length);\r\n    \r\n    const nextDate = new Date();\r\n    nextDate.setDate(nextDate.getDate() + Math.round(interval * weight));\r\n    \r\n    return nextDate;\r\n  };\r\n  \r\n  export const generateStudyPlan = (user) => {\r\n    const { course, performance } = user;\r\n    const today = new Date();\r\n    \r\n    // Simulação - na prática isso viria de uma API de IA\r\n    return {\r\n      priorityDecks: course.curriculum\r\n        .filter(subject => \r\n          !performance?.masteredDecks?.includes(subject.deckId))\r\n        .sort((a, b) => a.semester - b.semester)\r\n        .slice(0, 3)\r\n        .map(subject => subject.deckId),\r\n      suggestedSchedule: {\r\n        [today.toISOString().split('T')[0]]: [\r\n          { deckId: 'biology-101', duration: 30 },\r\n          { deckId: 'math-101', duration: 45 }\r\n        ]\r\n      },\r\n      estimatedMastery: {\r\n        weeklyGoal: 15,\r\n        projectedMasteryDate: new Date(\r\n          today.getFullYear(),\r\n          today.getMonth(),\r\n          today.getDate() + 30\r\n        )\r\n      }\r\n    };\r\n  };\r\n  \r\n  export const fetchAIExplanation = async (concept) => {\r\n    // Simulação - na prática chamaria uma API como OpenAI\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          explanation: `A IA explica que \"${concept}\" é um conceito fundamental que...`,\r\n          relatedConcepts: ['Concept A', 'Concept B'],\r\n          mnemonics: ['Mnemônico 1', 'Mnemônico 2']\r\n        });\r\n      }, 1000);\r\n    });\r\n  };"],"mappings":"AAAA,OAAO,MAAMA,2BAA2B,GAAGA,CAACC,YAAY,EAAEC,UAAU,KAAK;EACrE;EACA,MAAMC,SAAS,GAAG,CAChB,CAAC;EAAK;EACN,CAAC;EAAK;EACN,CAAC;EAAK;EACN,EAAE;EAAI;EACN,EAAE,CAAI;EAAA,CACP;EAED,MAAMC,iBAAiB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;EACjD,MAAMC,MAAM,GAAGD,iBAAiB,CAACF,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC;EAErD,MAAMI,QAAQ,GAAGL,YAAY,GAAGE,SAAS,CAACI,MAAM,GAC5CJ,SAAS,CAACF,YAAY,CAAC,GACvBE,SAAS,CAACA,SAAS,CAACI,MAAM,GAAG,CAAC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAER,YAAY,GAAGE,SAAS,CAACI,MAAM,CAAC;EAElF,MAAMG,QAAQ,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC3BD,QAAQ,CAACE,OAAO,CAACF,QAAQ,CAACG,OAAO,CAAC,CAAC,GAAGL,IAAI,CAACM,KAAK,CAACR,QAAQ,GAAGD,MAAM,CAAC,CAAC;EAEpE,OAAOK,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMK,iBAAiB,GAAIC,IAAI,IAAK;EACzC,MAAM;IAAEC,MAAM;IAAEC;EAAY,CAAC,GAAGF,IAAI;EACpC,MAAMG,KAAK,GAAG,IAAIR,IAAI,CAAC,CAAC;;EAExB;EACA,OAAO;IACLS,aAAa,EAAEH,MAAM,CAACI,UAAU,CAC7BC,MAAM,CAACC,OAAO;MAAA,IAAAC,qBAAA;MAAA,OACb,EAACN,WAAW,aAAXA,WAAW,gBAAAM,qBAAA,GAAXN,WAAW,CAAEO,aAAa,cAAAD,qBAAA,eAA1BA,qBAAA,CAA4BE,QAAQ,CAACH,OAAO,CAACI,MAAM,CAAC;IAAA,EAAC,CACvDC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,QAAQ,GAAGD,CAAC,CAACC,QAAQ,CAAC,CACvCC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXC,GAAG,CAACV,OAAO,IAAIA,OAAO,CAACI,MAAM,CAAC;IACjCO,iBAAiB,EAAE;MACjB,CAACf,KAAK,CAACgB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CACnC;QAAET,MAAM,EAAE,aAAa;QAAEU,QAAQ,EAAE;MAAG,CAAC,EACvC;QAAEV,MAAM,EAAE,UAAU;QAAEU,QAAQ,EAAE;MAAG,CAAC;IAExC,CAAC;IACDC,gBAAgB,EAAE;MAChBC,UAAU,EAAE,EAAE;MACdC,oBAAoB,EAAE,IAAI7B,IAAI,CAC5BQ,KAAK,CAACsB,WAAW,CAAC,CAAC,EACnBtB,KAAK,CAACuB,QAAQ,CAAC,CAAC,EAChBvB,KAAK,CAACN,OAAO,CAAC,CAAC,GAAG,EACpB;IACF;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAM8B,kBAAkB,GAAG,MAAOC,OAAO,IAAK;EACnD;EACA,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;IAC5BC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC;QACNE,WAAW,EAAE,qBAAqBJ,OAAO,oCAAoC;QAC7EK,eAAe,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC;QAC3CC,SAAS,EAAE,CAAC,aAAa,EAAE,aAAa;MAC1C,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}