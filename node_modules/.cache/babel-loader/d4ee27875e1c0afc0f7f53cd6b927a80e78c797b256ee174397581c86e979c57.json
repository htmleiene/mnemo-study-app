{"ast":null,"code":"import { getFromStorage, saveToStorage } from '../utils/storage';\nconst COURSES_KEY = 'app_courses';\nconst USER_COURSES_KEY = 'user_courses';\n\n// Dados mockados - em produção viriam de uma API\nconst mockUniversities = [{\n  id: 'usp',\n  name: 'Universidade de São Paulo (USP)',\n  courses: [{\n    id: 'med-usp',\n    name: 'Medicina',\n    duration: 12,\n    icon: 'fa-user-md'\n  }, {\n    id: 'comp-usp',\n    name: 'Ciência da Computação',\n    duration: 8,\n    icon: 'fa-laptop-code'\n  }]\n}, {\n  id: 'ufrj',\n  name: 'Universidade Federal do Rio de Janeiro (UFRJ)',\n  courses: [{\n    id: 'dir-ufrj',\n    name: 'Direito',\n    duration: 10,\n    icon: 'fa-gavel'\n  }, {\n    id: 'eng-ufrj',\n    name: 'Engenharia Civil',\n    duration: 10,\n    icon: 'fa-ruler-combined'\n  }]\n}];\nexport const getUniversities = async () => {\n  // Em produção: fetch('/api/universities')\n  return mockUniversities.map(u => ({\n    id: u.id,\n    name: u.name\n  }));\n};\nexport const getCoursesByUniversity = async universityId => {\n  // Em produção: fetch(`/api/universities/${universityId}/courses`)\n  const university = mockUniversities.find(u => u.id === universityId);\n  return university ? university.courses : [];\n};\nexport const getUserCourse = async userId => {\n  const userCourses = getFromStorage(USER_COURSES_KEY) || {};\n  return userCourses[userId] || null;\n};\nexport const updateUserCourse = async (userId, courseData) => {\n  const userCourses = getFromStorage(USER_COURSES_KEY) || {};\n  userCourses[userId] = courseData;\n  saveToStorage(USER_COURSES_KEY, userCourses);\n  return courseData;\n};\nexport const getCourseCurriculum = async courseId => {\n  // Busca em todas as universidades mockadas\n  for (const uni of mockUniversities) {\n    const course = uni.courses.find(c => c.id === courseId);\n    if (course) {\n      // Simulação de grade curricular\n      return generateMockCurriculum(courseId);\n    }\n  }\n  return null;\n};\nconst generateMockCurriculum = courseId => {\n  // Gerar uma grade curricular mockada baseada no curso\n  const semesters = courseId.includes('med') ? 12 : 8;\n  const curriculum = [];\n  for (let i = 1; i <= semesters; i++) {\n    curriculum.push({\n      semester: i,\n      subjects: [{\n        id: `${courseId}-subj${i}-1`,\n        name: `Disciplina ${i}.1`,\n        credits: 4,\n        required: true\n      }, {\n        id: `${courseId}-subj${i}-2`,\n        name: `Disciplina ${i}.2`,\n        credits: 4,\n        required: true\n      }]\n    });\n  }\n  return curriculum;\n};","map":{"version":3,"names":["getFromStorage","saveToStorage","COURSES_KEY","USER_COURSES_KEY","mockUniversities","id","name","courses","duration","icon","getUniversities","map","u","getCoursesByUniversity","universityId","university","find","getUserCourse","userId","userCourses","updateUserCourse","courseData","getCourseCurriculum","courseId","uni","course","c","generateMockCurriculum","semesters","includes","curriculum","i","push","semester","subjects","credits","required"],"sources":["C:/Users/5019508/Documents/dev/Mnemo/src/services/courses.js"],"sourcesContent":["import { getFromStorage, saveToStorage } from '../utils/storage';\r\n\r\nconst COURSES_KEY = 'app_courses';\r\nconst USER_COURSES_KEY = 'user_courses';\r\n\r\n// Dados mockados - em produção viriam de uma API\r\nconst mockUniversities = [\r\n  {\r\n    id: 'usp',\r\n    name: 'Universidade de São Paulo (USP)',\r\n    courses: [\r\n      { id: 'med-usp', name: 'Medicina', duration: 12, icon: 'fa-user-md' },\r\n      { id: 'comp-usp', name: 'Ciência da Computação', duration: 8, icon: 'fa-laptop-code' }\r\n    ]\r\n  },\r\n  {\r\n    id: 'ufrj',\r\n    name: 'Universidade Federal do Rio de Janeiro (UFRJ)',\r\n    courses: [\r\n      { id: 'dir-ufrj', name: 'Direito', duration: 10, icon: 'fa-gavel' },\r\n      { id: 'eng-ufrj', name: 'Engenharia Civil', duration: 10, icon: 'fa-ruler-combined' }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const getUniversities = async () => {\r\n  // Em produção: fetch('/api/universities')\r\n  return mockUniversities.map(u => ({ id: u.id, name: u.name }));\r\n};\r\n\r\nexport const getCoursesByUniversity = async (universityId) => {\r\n  // Em produção: fetch(`/api/universities/${universityId}/courses`)\r\n  const university = mockUniversities.find(u => u.id === universityId);\r\n  return university ? university.courses : [];\r\n};\r\n\r\nexport const getUserCourse = async (userId) => {\r\n  const userCourses = getFromStorage(USER_COURSES_KEY) || {};\r\n  return userCourses[userId] || null;\r\n};\r\n\r\nexport const updateUserCourse = async (userId, courseData) => {\r\n  const userCourses = getFromStorage(USER_COURSES_KEY) || {};\r\n  userCourses[userId] = courseData;\r\n  saveToStorage(USER_COURSES_KEY, userCourses);\r\n  return courseData;\r\n};\r\n\r\nexport const getCourseCurriculum = async (courseId) => {\r\n  // Busca em todas as universidades mockadas\r\n  for (const uni of mockUniversities) {\r\n    const course = uni.courses.find(c => c.id === courseId);\r\n    if (course) {\r\n      // Simulação de grade curricular\r\n      return generateMockCurriculum(courseId);\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nconst generateMockCurriculum = (courseId) => {\r\n  // Gerar uma grade curricular mockada baseada no curso\r\n  const semesters = courseId.includes('med') ? 12 : 8;\r\n  const curriculum = [];\r\n  \r\n  for (let i = 1; i <= semesters; i++) {\r\n    curriculum.push({\r\n      semester: i,\r\n      subjects: [\r\n        {\r\n          id: `${courseId}-subj${i}-1`,\r\n          name: `Disciplina ${i}.1`,\r\n          credits: 4,\r\n          required: true\r\n        },\r\n        {\r\n          id: `${courseId}-subj${i}-2`,\r\n          name: `Disciplina ${i}.2`,\r\n          credits: 4,\r\n          required: true\r\n        }\r\n      ]\r\n    });\r\n  }\r\n  \r\n  return curriculum;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}